# 🐍 Python Practice: Conditional Statements, Lists, Strings, and Tuples

This code demonstrates basic Python concepts including:

- Conditional statements
- List operations
- String properties
- Tuple behavior

---

## ✅ Conditional Statements

```python
Marks = int(input("How many marks did you get? "))

if Marks >= 90:
    print(f"You are in A+ Grade. You got {Marks} marks.")
elif Marks < 40:
    print(f"You failed because you got only {Marks} marks.")
else:
    print(f"You passed with {Marks} marks.")


- List operations

marks = [14, 45, 12, 78, 90, 100, 23, 56, 67, 89]

marks.sort()
print(marks)

marks.append(100)
print(marks)

marks.pop()
print(marks)


collection = ["vikas", "kumain", "chand", "raj", "suresh", "kumar"]

print(collection)

collection[2] = "rajkumar"
print(collection)

collection[0] = "vikas kumar"
print(collection)

print(collection[-5])  # Accessing element with negative index

collection.reverse()
print(collection)

collection.sort()
print(collection)

collection.append("rajkumar")
print(collection)

collection.pop()
print(collection)

collection.remove("rajkumar")
print(collection)

collection.insert(2, "rajkumar")
print(collection)

collection.clear()
print(collection)

collection.extend(["rajkumar", "suresh"])
print(collection)

collection.count("rajkumar")

- String properties

string = "vikas kumar"

print(string[-4])  # Accessing character by index

# string[0] = "V"  # ❌ Error: strings are immutable

print("Strings are immutable. You cannot change characters directly.")



# 📦 Python Tuples: Examples and Common Methods

This section provides a clear explanation of **Python Tuples**, their usage, and available methods.

---

## 🔹 What is a Tuple?

- A **tuple** is an ordered, immutable collection of elements.
- Tuples are defined using **parentheses `()`**.
- Once a tuple is created, its values **cannot be changed**.

---

## ✅ Creating and Using a Tuple

```python
# Creating a tuple
names = ("vikas", "kumain", "chand", "raj", "suresh", "kumar")

# Accessing elements
print("Full tuple:", names)
print("Element at index 2:", names[2])      # Output: chand
print("Last element (negative index):", names[-1])  # Output: kumar

# Length of the tuple
print("Length:", len(names))


👨‍💻 Author Vikas kumain 
